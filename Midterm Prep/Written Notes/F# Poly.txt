
//				//
// polymorphism //
//				//

major new ingredient is type vars within type system
use letters like a, B, ... as type vars

language of types is now
T := int | bool | ... | T1 * T2 | T1 -> T2 | a

what does it mean to say 
expression e has type a * a?

any type expression substituted consistenly for a
	gives a possible type of e 

means that e belongs to any one of a family of types 

what are these substitutions?
define by induction
	notation [T / a]T': 
	replace occurences of a in T' by T
	
1) [T / a]a = T
2) [T / a]B = B (a =/= B)
3) [T / a]int = int
4) [T / a]bool = bool
5) [T / a]T1 * T2 = ([T / a]T1) = ([T / a]T2)
6) [T / a]T1 -> T2 = ([T / a]T1) -> ([T / a]T2)

here is crucial rule that captures polymorphism

	if r |- e: T then [T' / a]r |- e: [T' / a]T

in our definition of substitution 
there is nothing that says T cannot have its own type vars

consider fun x -> x
it can be given any monotypes
	x: int |- x: int
	_________________________
	|- fun x -> x: int -> int

or 
	x: int -> int |- x: int -> int
	___________________________________________
	|- fun x -> x: (int -> int) -> (int -> int)
	
these types for fun x -> x are all obtained 
by making appropriate subsitutions to a -> a

call them substitution instances of a -> a

//
// thm
//

for every expression e
	there is a unique type T
	possibly containing type vars such that 
	every valid type for e
	is obtained by an appropriate substitution of T

say that T is the principle type for e 

//
// TYPE INFERENCE 
//

strategy to introduce fresh type vars 
	whenever we dont know type of sub-expression 

then look at how the expression are used to infer constraints
	on type vars

final phase
	try to solve constraints

will look for most general solution
	we are looking for solution such that
	all other possible solutions are substitution instances
	of the most general one 
	
notation
	r |- e: T / C

in context r, expression e will have 
	type T if constraints in C are satisfied
	
constraints are of form T1 = T2
for constants we do not generate constraints 

					x: T in r
_______________		_____________
r |- n: int / 0		r |- x: T / 0


r |- bool / C0, r |- e1: T1 / C1, r |- e2: T2 / C2
_______________________________________________________
r |- if e then e1 else e2: T / C0 U C1 U C2 U {T1 = T2}


r |- e1: T1 / C1, r |- e2: T2 / C2
__________________________________________________
r |- e1 + e2: int / C1 U C2 U {T1 = int, T2 = int}


r |- e1: T1 / C1, r |- e2: T2 / C2
________________________________________
r |- e1 = e2: bool / C1 U C2 U {T1 = T2}


r |- e1: T1 / C1, (r, x: T1) |- e2: T2 / C2
___________________________________________
r |- let x = e1  in e2: T2 / C1 U C2

// 
// functions
//

how can we know type of x in fun x -> ...?
we dont
	introduce a fresh type var say a
	
	r, x: a |- e: T / C
	___________________________
	r |- fun x -> e: a -> T / C

example 
	________________		_________________
	x: a |- x: a / 0		x: a + 1: int / 0
	_________________________________________
	x: a |- x + 1: int / {a = int}
	_______________________________________
	|- fun x -> x + 1: a -> int / {a = int}

solution a = int
	so we get 
	
	_____________________________
	|- fun x -> x + 1: int -> int

//
// applications
//

have to guess the return type 
	of e1, e2 by introducing fresh type var
	
	r |- e1: T1 / C1, r |- e2: T2 / C2
	________________________________________
	r |- e1 e2: a | C1 U C2 U {T1 = T2 -> a}
	
lists
	r |- e1: T1 / C1, r |- e2: T2 / C2
	________________________________________________
	r |- (e1 :: e2): T2 / C1 U C2 U {T2 = T1 - list}

				r |- l: T-list / C		r |- l: T-list / C
___________		___________________		________________________
r[]: a-list		r |- head(l): T / C		r |- tail(l): T-list / C

examples of informal derivations

	let rec map = 
		fun f -> 
			fun x ->
				if (x = []) then []
				else f (head(x))) :: (map f (tail(x)))

introduce vars for types that we do not
know and then look for constraints
	f: a, x: B
	
from x = [] we see B = v-list
from f(head(x)) we see f is a function 
and head(x): v
so a = v -> s
	s is fresh

f(head(x)) = s 
	so f(head(x)) :: ...: s-list
so type of map is 
	(v -> s) -> v-list -> s-list 
	
let rec append(l1, l2) = 
	match l1 with
	| [] -> l2
	| x :: xs -> x :: (append(xs, l2))

	l1: a, l2: B
	from the match: a = v-list, v-fresh
		x: v so return type is a v-list
	so l2: v-list

thus v-list * v-list -> v-list

let double = fun f -> fun x -> f (f x)

	f: a, x: B		f x: v
	so f: B -> v = a
		f (f x) says input type for f is v
	so B = v
	double: (B -> B) -> B -> B

	fun f -> ff
		f: a 	ff says f: a -> B
	so a = a -> B

this equation cannot be solved




















