
//					  //
// HOW TO ENVIRONMENT //
//					  //

rules for drawing env diagrams
1. every 'let' opens a new scope for bindings
	when you see
	let x = ...
	
immediately draw 
	
	[x| ]
with the box on the right empty at first 

2. there should be an arrow from new box to 
	NEAREST ENCLOSING box that is still open 
	
if we have 
	let x = 1 in 
		let y = 2 in 
	
draw 
	x|1
	  ^
	  |
	y|2

arrow goes from 1 whole box to another 
	this picture, arrow points at x|1 not at 1 
	
3. to fill value in RHS of a box 
	must produce a value
	
	a) int 
	b) boolean
	c) float
	d) string
	e) data structure 
	f) function (together with some additional data)
	g) memory address [LATER]
	
4. we need to evaluate the expression exp in 
	let x = exp 
	in order to get a value 
	
this expression is to be evaluated in the env 
	that exists when you enter the let 
	
it cannot include the value you are defining 

thus you cannot implement recursion with a let 

5. to implement a recursive definition 
	have to use keyword rec 
	
	let rec fact n = ...

this causes new env pointer to point to frame being created 
 
6. evaluation of a fn definition produces a CLOSURE 

	let foo n = n + 1729
	
	produces a closure 
	as does 
		let foo = fun n -> n + 1729
	
7. what is closure?

3 pieces 
	a) a (list of) paramters(s)
	b) a body
		ie. code which may mention names 
	c) pointer to env that exists 
		when fn is defined 
	never follow this pointer when searching for bindings 
	
//
// how a function is called 
//
	
i) evaluate the arg(s) in the current env 
ii) create a new frame (binding) matching the parameter 
	with value produced by evaluating the argument 
iii) pointer from this frame goes to the same
	place as the pointer in the closure 
iv) now evaluate the body 
	follow pointers until you find the name you need 
	NEVER go inside closures and follow pointers there
	the closure is used to set up the env for evaluating the fn body 
	
let y = 3 in	
	let f = let x = 4 in fun u -> x + y in 
	f(1)

step 1 	
	y|3 

step 2
	y|3 
	^
	|
	f|?
	
step 3
	-->	y|3 
	|	^
	|	|
	|	f|?
	|	
	|-- x|4
	
step 4
	-->	y|3 
	|	^
	|	|
	|	[f|u] 
	|	  |[x + y] --
	|				 |
	|-- x|4	 <--------

step 5 
	-->	y|3 
	|	^
	|	|
	|	[f|u] 			      ? where does this go? 
	|	  |[x + y] --		  ^
	|				 |	      |
	|-- x|4	 <--------		u|1 

answer: the same place as the arrow in closure 
	-->	y|3 
	|	^
	|	|
	|	[f|u] 			      
	|	  |[x + y] --		  
	|				 |	      
	|-- x|4	 <--------		
		^	
		|--	u|1
			^
			|
		x + y 
			